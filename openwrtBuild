#!/usr/bin/env bash

#####################
##### DEFAULTS ######
#####################

setDefaults() {

    runDebug "${FUNCNAME[0]}"

    [[ -z $_debug ]] && _debug="true" # Set to true to enable debugging by default
    [[ -z $_builddir ]] && _builddir="$PWD"
    [[ -z $_filesroot ]] && _filesroot="$_builddir/files/"

    # Global default packages for all profiles
    declare -ag _packages=("luci" "nano" "htop" "tcpdump" "diffutils")

    # If no profile is specified, use the TP-Link Archer C7 v2
    [[ -z $_profile ]] && _profile="tplink_archer-c7-v2"

    # PROFILES
    # TP-Link Archer C7 v2
    if [[ "$_profile" == "tplink_archer-c7-v2" ]]; then
        [[ -z $_version ]] && _version="19.07.2"
        [[ -z $_target ]] && _target="ath79/generic"
    # Raspberry Pi 4
    elif [[ "$_profile" == "rpi-4" ]]; then
        [[ -z $_version ]] && _version="snapshot"
        [[ -z $_target ]] && _target="bcm27xx/bcm2711"
        _packages+=("kmod-usb-net-asix-ax88179" "luci-app-upnp" "luci-app-wireguard" \
        "luci-app-vpn-policy-routing" "-dnsmasq" "dnsmasq-full")
    fi
}

#####################
##### FUNCTIONS #####
#####################

printHelpAndExit () {

    runDebug "${FUNCNAME[0]}"

    cat <<-'EOF'
USAGE:
buildOpenWRT [[OPTION] [VALUE]]...

OPTIONS
    --version, -v OPENWRT_VERSION
    --target, -t TARGET
    --profile, -p PROFILE
    --builddir, -b PATH
    --ssh-backup SSH path
        Example: root@192.168.1.1
    --flash, -f DEVICE
        Example: /dev/sdX
    --debug, -d
    --help, -h
EOF
        # Exit using passed exit code
        [[ -z $1 ]] && exit 0 || exit "$1"
}


parseInput () {

    runDebug "${FUNCNAME[0]}"

    if _input=$(getopt -o +v:t:p:b:f:dh -l version:,target:,profile:,builddir:,ssh-backup:,flash:,debug,help -- "$@"); then
        eval set -- "$_input"
        while true; do
            case "$1" in
                --version|-v)
                    shift && _version="$1"
                    ;;
                --target|-t)
                    shift && _target="$1"
                    ;;
                --profile|-p)
                    shift && _profile="$1"
                    ;;
                --builddir|-b)
                    shift && _builddir="$1"
                    ;;
                --ssh-backup)
                    shift && _ssh_backup="$1"
                    ;;
                --flash|-f)
                    shift && _flash_dev="$1"
                    ;;
                --debug|-d)
                    echo "Debugging on"
                    _debug="true"
                    ;;
                --help|-h)
                    _printHelpAndExit 0
                    ;;
                --)
                    shift
                    break
                    ;;
            esac
            shift
        done
    else
        echo "Incorrect options provided"
        printHelpAndExit 1
    fi
}


runDebug () { [[ "$_debug" == "true" ]] && echo "Running: " "$@" ; }


installPrerequisites () {

    runDebug "${FUNCNAME[0]}"

    getOS () {

        runDebug "${FUNCNAME[0]}"

        if [[ -f /etc/os-release ]]; then
            source /etc/os-release
            echo "Detected platform: $ID"
        else
            echo "Cannot detect OS!"
            exit 1
        fi
    }
    getOS


    echo "Installing dependencies..."
    if [[ "$ID" == "fedora" ]]; then
        if ! sudo dnf -y install @c-development @development-tools @development-libs zlib-static elfutils-libelf-devel gawk unzip file wget python3 python2 axel > /dev/null 2>&1; then
            echo "Warning: Problem installing prerequisites"
        fi
    elif [[ "$ID" =~ ^(debian|ubuntu)$ ]]; then
        if ! sudo apt-get -y install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python axel > /dev/null 2>&1; then
            echo "Warning: Problem installing prerequisites"
        fi
    fi
}


acquireImageBuilder () {

    runDebug "${FUNCNAME[0]}"

    local _url _filename
    export _source_archive

    echo "Downloading image archive..."

    if [[ "$_version" == "snapshot" ]]; then
        _filename="openwrt-imagebuilder-${_target//\//-}.Linux-x86_64.tar.xz"
        _url="https://downloads.openwrt.org/snapshots/targets/$_target/$_filename"
    else
        _filename="openwrt-imagebuilder-$_version-${_target//\//-}.Linux-x86_64.tar.xz"
        _url="https://downloads.openwrt.org/releases/$_version/targets/$_target/$_filename"
    fi

    # Make sources directory if it does not exist
    [[ ! -d "$_builddir/sources" ]] && mkdir -p "$_builddir/sources"

    _source_archive="$_builddir/sources/$_profile-$_version.tar.xz"

    # Remove existing ImageBuilder archives
    [[ -f "$_source_archive" ]] && rm "$_source_archive"

    if ! axel -o "$_source_archive" "$_url"; then
        echo "Could not download Image Builder"
        exit 1
    fi
}


extractImageBuilder () {

    runDebug "${FUNCNAME[0]}"

    export _source_dir="${_source_archive%.tar.xz}"

    [[ ! -d "$_source_dir" ]] && mkdir -p "$_source_dir"

    echo "Extracting image archive..."
    if [[ -f "$_source_archive" ]]; then
        if ! tar -xf "$_source_archive" -C "$_source_dir" --strip-components 1; then
            echo "Extraction failed"
            exit 1
        fi
    fi
}


makeImage () {

    runDebug "${FUNCNAME[0]}"

    export _out_bin_gz _out_bin_dir

    # move to extracted source directory
    if ! pushd "$_source_dir" > /dev/null 2>&1; then
        exit 1
    fi

    _out_bin_dir="$_builddir/bin/$_profile-$_version/"

    # Make bin dir
    [[ ! -d "$_out_bin_dir" ]] && mkdir -p "$_out_bin_dir"

    # build image
    echo "Running make -j4 image BIN_DIR=$_out_bin_dir PROFILE=$_profile PACKAGES=${_packages[*]} FILES=$_filesroot"
    if ! make -j4 image BIN_DIR="$_out_bin_dir" PROFILE="$_profile" \
    PACKAGES="${_packages[*]}" FILES="$_filesroot" > make.log; then
        echo "Make image failed!"
        exit 1
    fi

    _out_bin_gz="$_out_bin_dir/openwrt-${_target//\//-}-$_profile-ext4-factory.img.gz"

    if [[ ! -f "$_out_bin_gz" ]]; then
        echo "Make output image archive not found"
        exit 1
    fi

    if ! popd > /dev/null 2>&1; then
        exit 1
    fi
}


flashImage() {

    runDebug "${FUNCNAME[0]}"

    local _out_bin="${_out_bin_gz%.gz}"

    if [[ -f "$_out_bin_gz" ]]; then
        gunzip "$_out_bin_gz"
    fi

    if [[ ! -f "$_out_bin" ]]; then
        echo "Cannot find output bin file"
        exit 1
    fi

    if [[ ! -d "$_flash_dev" ]]; then
        echo "The device specified by --flash could not be found"
        exit 1
    fi

    echo "Unmounting target device $_flash_dev partitions..."
    sudo umount "$_flash_dev?*"

    if sudo dd if="$_out_bin" of="$_flash_dev" bs=2M conv=fsync; then
        sync
        echo "Image flashed sucessfully!"
    else
        echo "dd failed!"
        exit 1
    fi
}


#sshBackup () {
#
#    runDebug "${FUNCNAME[0]}"
#
#    # Make files directory if it does not exist
#    [[ ! -d "$_filesroot" ]] && mkdir -p "$_filesroot"
#
#    for fd in "${_backedup[@]}"; do
#        _dir="${fd%/*}/"
#        [[ ! -d "$_filesroot$_dir" ]] && mkdir -p "$_filesroot/$_dir"
#        if ! scp -rp "$_ssh_backup:$fd" "$_filesroot/$_dir"; then
#            echo "Did not successfully backup files from --ssh-backup"
#            echo "Exiting now to prevent data loss!"
#            exit 1
#        fi
#    done
#}


__main () {

    parseInput "$@"
    setDefaults
    installPrerequisites
    acquireImageBuilder
    extractImageBuilder
    #[[ -n $_ssh_backup ]] && sshBackup
    makeImage
    [[ -n $_flash_dev ]] && flashImage
}

__main "$@"
exit $?
